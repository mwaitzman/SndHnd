





//$$strtCprt
/**
* SndHnd
* 
* Copyright (C) 1992-2020 Thornton Green
* 
* This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as
* published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.
* This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty 
* of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
* You should have received a copy of the GNU General Public License along with this program; if not, 
* see <http://www.gnu.org/licenses>.
* Additional permission under GNU GPL version 3 section 7
*
*/
//$$endCprt







package intonations;

import greditinton.GIntonation;
import greditinton.GWesternIntonation;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.HashMap;

import meta.DataFormatException;
import meta.VersionBuffer;
import core.Intonation;

/**
 * An abstract class for generating a mode (for instance a Lydian mode) from
 * a western 12-tone scale.
 * 
 * @author tgreen
 *
 */
public abstract class GAbstractMode extends GIntonation implements Externalizable
{
	
	/**
	 * The intonation from which to generate the mode.
	 */
	protected GIntonation i1;

	/**
	 * Constructs the node.
	 */
	public GAbstractMode() {
		super();
	}

	@Override
	public Intonation genInton(HashMap s) {
		return( i1.genInton(s) );
	}
	
	/**
	 * Returns a string defining how a particular mode 
	 * skips over scale steps.  Note that the skips
	 * are relative to the intonation i1 member.
	 * @return String defining the skips.
	 */
	protected abstract String getKeyString();
	
	/**
	 * Returns a string describing the key
	 * (for instance key of C#) of the mode.
	 * Note that they key is relative to the 
	 * intonation i1 member.
	 * @return The string describing the key.
	 */
	protected abstract int getKeyStart();
	
	
	/**
	 * Returns an offset into the intonation table defining the key
	 * (for instance key of C#) of the mode.
	 * Note that the key is relative to the intonation i1 member.
	 * @return The intonation table offset.
	 */
	protected abstract int getIndexOffset();
	
	
	@Override
	public String[] getScaleNames()
	{
		if( !( ( i1.getBaseIntonation() ) instanceof GWesternIntonation ) )
		{
			throw( new RuntimeException( "NotSupported" ) );
		}
		final String[] keySkip = generateKeySkip();
		final String[] noteNames = new String[ 12 ];
		int count;
		for( count = 0 ; count < 12 ; count++ )
		{
			noteNames[ ( count + getIndexOffset() ) % 12 ] = keySkip[ count ];
		}
		for( count = 0 ; count < 12 ; count++ )
		{
			System.out.println( noteNames[ count ] );
		}
		return( noteNames );
	}
	
	@Override
	public String[] getPriScaleNames()
	{
		return( i1.getPriScaleNames() );
	}
	
	
	/**
	 * Using the key string generated by getKeyString() which defines how the
	 * mode skips steps in the scale, produces an array of scale names for the
	 * mode.  This method is called by subclasses.
	 * 
	 * @return The array of scale names for the mode.
	 */
	protected String[] generateKeySkip()
	{
		if( !( ( i1.getBaseIntonation() ) instanceof GWesternIntonation ) )
		{
			throw( new RuntimeException( "NotSupported" ) );
		}
		final String keyString = getKeyString();
		int keyStart = getKeyStart();
		final String[] ret = new String[ 13 ];
		int count;
		int index = 0;
		ret[ 0 ] = "" + ( getPriScaleNames()[ keyStart % 7 ] );
		for( count = 0 ; count < keyString.length() ; count++ )
		{
			if( keyString.charAt( count ) == 'S' )
			{
				index = index + 1;
				keyStart++;
				ret[ index ] = "" + ( getPriScaleNames()[ keyStart % 7 ] );
			}
			
			if( keyString.charAt( count ) == 'T' )
			{
				index = index + 1;
				ret[ index ] = "" + ( getPriScaleNames()[ keyStart % 7 ] ) + "#";
				
				index = index + 1;
				keyStart++;
				ret[ index ] = "" + ( getPriScaleNames()[ keyStart % 7 ] );
			}
			
			if( keyString.charAt( count ) == 'F' )
			{
				index = index + 1;
				ret[ index ] = "" + ( getPriScaleNames()[ keyStart % 7 ] ) + "#";
				
				index = index + 1;
				keyStart++;
				ret[ index ] = "" + ( getPriScaleNames()[ keyStart % 7 ] ) + "b";
				
				index = index + 1;
				ret[ index ] = "" + ( getPriScaleNames()[ keyStart % 7 ] );
			}
		}
		if( index != 12 )
		{
			throw( new RuntimeException( "Bad. " + index ) );
		}
		return( ret );
	}
	
	@Override
	public GIntonation getBaseIntonation()
	{
		if( !( ( i1.getBaseIntonation() ) instanceof GWesternIntonation ) )
		{
			throw( new RuntimeException( "NotSupported" ) );
		}
		return( i1.getBaseIntonation() );
	}
	
	
	@Override
	public void writeExternal(ObjectOutput out) throws IOException {
		super.writeExternal(out);
		VersionBuffer myv = new VersionBuffer(VersionBuffer.WRITE);

		if( i1 != null ) myv.setProperty("I1", i1);

		out.writeObject(myv);
	}

	
	@Override
	public void readExternal(ObjectInput in) throws IOException,
			ClassNotFoundException {
		try {
			super.readExternal(in);
			VersionBuffer myv = (VersionBuffer) (in.readObject());
			VersionBuffer.chkNul(myv);

			i1 = (GIntonation)( myv.getProperty("I1") );

		} catch (ClassCastException ex) {
			throw (new DataFormatException(ex));
		}
	}

	
	
}


